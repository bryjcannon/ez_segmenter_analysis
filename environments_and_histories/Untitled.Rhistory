BiocManager::install()
BiocManager::valid()
library("flowCore")
library("flowVS") #
install.packages(ks)
install.packages('ks')
library(ks)
library("flowVS") #
library("flowViz")
library("RColorBrewer")
library("gplots")
library("ggplot2") #
library("samr") #
library("lattice")
library("samr") #
install.packages('openxlsx')
library('openxlsx')
library("samr") #
library("lattice")
library("flowStats") #
library("gdata")
library("Rtsne")
library("FlowSOM") #
library("Rtsne")
library("gdata")
library("Rtsne")
library("FlowSOM") #
library("plyr")
library("pryr")
library("doBy") #
library("scales")
library("mixOmics") #
library("reshape2")
library("plotly") #
library("Rmisc")
library("Hmisc") #
#add new pakaages to library, see if you can do this automatically
library("R.matlab")
library("digest")
library("rlang")
library("flowCore")
library("ks")
library("flowVS") #
library("flowViz")
library("RColorBrewer")
library("gplots")
library("ggplot2")
library("openxlsx") #
library("samr") #
library("lattice")
library("flowStats") #
library("gdata")
library("Rtsne")
library("FlowSOM") #
library("plyr")
library("pryr")
library("doBy") #
library("scales")
library("mixOmics") #
library("reshape2")
library("plotly") #
library("Rmisc")
library("Hmisc") #
# set seed for downstream analysis
set.seed(123)
##### 1) LOAD DATA #####
# move to location of your data, load in fcs and .mat files (spatial information retained here)
data_folder = '/Volumes/BryJC_Stanford/For_Ez_Segmentor/HiADCase_Hippocampus\ /denoisedfft_HiResADuci2717J/'
setwd(data_folder)
ezRun = 'ezSegResults_CA2'
# create FlowSet from fcs files
init_fcsNames = list.files(path = paste0(ezRun,'/','fcs_all'), full.names = T, pattern = ".fcs")
init_flowSet = read.flowSet(files = init_fcsNames, alter.names = T, transformation = FALSE, emptyValue = FALSE, truncate_max_range = FALSE)
# create a list 'point_source' that assigns a point_id to each object
dim = fsApply(init_flowSet, dim)
dim = as.numeric(dim[,1])
# set up lists for adding point_ids for each object
point_names = sampleNames(init_flowSet)
point_numbers = as.numeric(gsub("[^0-9]*", '', gsub(".*Point[^0-9]*", '', point_names))) # grabs point numbers from filenames and converts to numeric
point_id = as.vector(x = NULL)
# set up lists for adding object_type_ids for each object
object_types = gsub("_dataScaleSize_Point[0-9]*.fcs", "", point_names)
object_type_id = as.vector(x = NULL)
# set up lists for adding region_ids for each object
regions = rep('CA2', length(dim))
region_id = as.vector(x = NULL)
for(i in 1:length(dim)) { #loop creates the actual vector with point id's for each object
temp_point_id = rep(point_numbers[i], dim[i])
point_id = c(point_id, temp_point_id)
temp_object_type_id = rep(object_types[i], dim[i])
object_type_id = c(object_type_id, temp_object_type_id)
temp_region_id = rep(regions[i], dim[i])
region_id = c(region_id, temp_region_id)
}
# convert init_data format to matrix (numeric info), then dataFrame (characters + factors), then bind labeling info to dataFrame (keeps string labels)
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_frame, point_id, object_type_id, region_id)
# assign and standardize panels if needed
panel = colnames(objects_data_frame[,7:47][, -c(4,5)])
# sample for later use
n_sub = 20000
n = nrow(objects_data_frame)
set.seed(123)
subsetted = sample(1:n, n_sub)
# linear transformation
obj_linear_transform = objects_data_frame
obj_linear_transform[,3:54] = obj_linear_transform[,3:54]*100 # multiply all counts by 100 (linear transform)
# do arcsinh transformation only for the clustering.channels
obj_lin_asinh_transf = obj_linear_transform
asinh_scale = 5
obj_lin_asinh_transf[,3:54] = asinh(obj_lin_asinh_transf[,3:54] / asinh_scale)
# sample for later use
n_sub = 2000
n = nrow(objects_data_frame)
set.seed(123)
subsetted = sample(1:n, n_sub)
# linear transformation
obj_linear_transform = objects_data_frame
obj_linear_transform[,3:54] = obj_linear_transform[,3:54]*100 # multiply all counts by 100 (linear transform)
# do arcsinh transformation only for the clustering.channels
obj_lin_asinh_transf = obj_linear_transform
asinh_scale = 5
obj_lin_asinh_transf[,3:54] = asinh(obj_lin_asinh_transf[,3:54] / asinh_scale)
#PERCENTILE normalize expression values from 0 to 1
obj_normalized = obj_lin_asinh_transf
normalization_vector = apply(obj_lin_asinh_transf[,3:54], 2, function(x) quantile(x, 0.9999, names = F))
obj_normalized[,3:54] = t(t(obj_normalized[,3:54]) / as.numeric(normalization_vector))
# check whether you adjusted the range approximately from 0 to 1
apply(obj_normalized[,3:54], 2, max)
# tSNE analysis
# prepare object data - pick a transformed data.frame and revert back to matrix for RtSNE
obj_rtsne = obj_normalized[, c(panel)]
obj_rtsne = as.matrix(obj_rtsne)
head(obj_rtsne)
colnames(obj_rtsne)
dim(obj_rtsne)
# run RtSNE
set.seed(123)
out_obj_rtsne <- Rtsne(obj_rtsne, dims = 2, perplexity = 50, theta = 0.5, #Run Rtnse.multicore if using Ubuntu/S3IT
max_iter = 1000, verbose = T, pca = F, check_duplicates=F)
# prepare for plotting
obj_tsne_plot = as.data.frame(out_obj_rtsne$Y)
colnames(obj_tsne_plot) = c("tSNE1", "tSNE2")
obj_tsne_plot$obj_id = obj_normalized[, "objLabelInImage"]
obj_tsne_plot$pt_id = obj_normalized[, "point_id"]
obj_tsne_plot$reg_id = obj_normalized[, "region_id"]
head(data_plot)
head(obj_tsne_plot)
theme_tsne1 <-  theme (panel.spacing = unit(1.3, "lines"),
strip.text = element_text(size = rel(1.5)),
axis.ticks.length = unit(0.3, "lines"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.background = element_rect(color="white"),
strip.background = element_blank(),
panel.background = element_blank(),
aspect.ratio = 1,
legend.text=element_text(size=15),
legend.title=element_text(size=15))
# keep track of data_plot for all cells
obj_tsne_plot1 = obj_tsne_plot
obj_tsne_plot2 = obj_tsne_plot
# plot tSNE
p1 <- ggplot(obj_tsne_plot1, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
theme_tsne <-  theme (panel.spacing = unit(1.3, "lines"),
strip.text = element_text(size = rel(1.5)),
axis.ticks.length = unit(0.3, "lines"),
axis.text = element_blank(),
axis.title.x = element_text(size = 35),
axis.title.y = element_text(size = 35),
plot.background = element_rect(color="white"),
strip.background = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
aspect.ratio = 1,
legend.text=element_text(size=15),
legend.title=element_text(size=15))
p1 + theme_tsne # from DM / FH script
savehistory("/Volumes/BryJC_Stanford/For_Ez_Segmentor/HiADCase_Hippocampus /denoisedfft_HiResADuci2717J/Untitled.Rhistory")
theme_biaxial <- theme(axis.title.x = element_text(size=20),
axis.title.y = element_text(size=20),
axis.text = element_text(size=20))
ggplot(data = obj_normalized, aes(x = Iba1, y = CD45)) + geom_point(alpha=1, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = CD45)) + geom_point(alpha=2, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = CD45)) + geom_point(alpha=1, size=1) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = CD45)) + geom_point(alpha=2, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = CD45)) + geom_point(alpha=1, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = ApoE4)) + geom_point(alpha=1, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = PHF1Tau)) + geom_point(alpha=1, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Iba1, y = CD47)) + geom_point(alpha=1, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = Synaptophysin, y = CD47)) + geom_point(alpha=1, size=0.5) + theme_biaxial
ggplot(data = obj_normalized, aes(x = PSD95, y = CD47)) + geom_point(alpha=1, size=0.5) + theme_biaxial
# prepare for plotting (double check assignments are correct between categories and objects)
obj_tsne_plot = as.data.frame(out_obj_rtsne$Y)
colnames(obj_tsne_plot) = c("tSNE1", "tSNE2")
obj_tsne_plot$obj_id = obj_normalized[, "objLabelInImage"]
obj_tsne_plot$obj_type_id = obj_normalized[, "object_type_id"]
obj_tsne_plot$pt_id = obj_normalized[, "point_id"]
obj_tsne_plot$reg_id = obj_normalized[, "region_id"]
head(obj_tsne_plot)
# keep track of data_plot for all cells
obj_tsne_plot1 = obj_tsne_plot
obj_tsne_plot2 = obj_tsne_plot
# plot tSNE
p1 <- ggplot(obj_tsne_plot1, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
obj_tsne_plot_microglia = subset(obj_tsne_plot, object_type_id == "microglia")
# plot tSNE
p2 <- ggplot(tsne, aes(x = bhSNE1, y = bhSNE2)) +
geom_point(size = 0.5, aes(colour = S100b)) +
scale_colour_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 0.5, limits = c(0,1),
space = "rgb", guide = "colourbar") +
coord_fixed(ratio = 1)
# plot tSNE
p2 <- ggplot(obj_tsne_plot, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 0.5, aes(colour = Iba1)) +
scale_colour_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 0.5, limits = c(0,1),
space = "rgb", guide = "colourbar") +
coord_fixed(ratio = 1)
p2 + theme_tsne
# plot tSNE
p2 <- ggplot(obj_tsne_plot, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 0.5, aes(color = Iba1)) +
scale_colour_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 0.5, limits = c(0,1),
space = "rgb", guide = "colorbar") +
coord_fixed(ratio = 1)
p2 + theme_tsne
# plot tSNE
p2 <- ggplot(obj_tsne_plot, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 0.5, aes(color = CD47)) +
scale_colour_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 0.5, limits = c(0,1),
space = "rgb", guide = "colorbar") +
coord_fixed(ratio = 1)
p2 + theme_tsne
# plot tSNE
p2 <- ggplot(obj_tsne_plot, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 0.5, aes(color = "Iba1"")) +
scale_colour_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 0.5, limits = c(0,1),
space = "rgb", guide = "colorbar") +
coord_fixed(ratio = 1)
p2 + theme_tsne
# plot tSNE
p2 <- ggplot(obj_tsne_plot, aes(x = tSNE1, y = tSNE2)) +
geom_point(size = 0.5, aes(color = "Iba1")) +
scale_colour_gradient2(low = "black", mid = "yellow", high = "red", midpoint = 0.5, limits = c(0,1),
space = "rgb", guide = "colorbar") +
coord_fixed(ratio = 1)
p2 + theme_tsne
# plot tSNE
p1 <- ggplot(obj_tsne_plot1, aes(x = tSNE1, y = tSNE2, color = object_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot1, aes(x = tSNE1, y = tSNE2, color = point_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot1, aes(x = tSNE1, y = tSNE2, color = CD47)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# prepare for plotting (double check assignments are correct between categories and objects)
obj_tsne_plot = as.data.frame(out_obj_rtsne$Y)
colnames(obj_tsne_plot) = c("tSNE1", "tSNE2")
obj_tsne_plot_all_data = obj_tsne_plot
obj_tsne_plot_all_data = obj_tsne_plot
# prepare for plotting (double check assignments are correct between categories and objects)
obj_tsne_plot = as.data.frame(out_obj_rtsne$Y)
colnames(obj_tsne_plot) = c("tSNE1", "tSNE2")
obj_tsne_plot_all_data = obj_tsne_plot
obj_tsne_plot$obj_id = obj_normalized[, "objLabelInImage"]
obj_tsne_plot$obj_type_id = obj_normalized[, "object_type_id"]
obj_tsne_plot$pt_id = obj_normalized[, "point_id"]
obj_tsne_plot$reg_id = obj_normalized[, "region_id"]
head(obj_tsne_plot)
obj_tsne_plot_all_data = cbind(obj_tsne_plot, obj_normalized)
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = object_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = CD47)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = Iba1)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = ApoE4)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = object_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = Au197)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = Au197)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = Amyloidbeta140)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = Amyloidbeta142)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = PanAmyloidbeta1724)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
# plot tSNE
p1 <- ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = Amyloidbeta142)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
install.packages("umap")
library(umap)
# UMAP analysis
# use tSNE prepped data for UMAP
obj_umap = obj_normalized[, c(panel)]
obj_umap = as.matrix(obj_umap)
# UMAP analysis
# use tSNE prepped data for UMAP
obj_umap = obj_normalized[, c(panel)]
obj_umap = as.matrix(obj_umap)
out_obj_umap = umap(obj_umap)
ggplot(aes(UMAP1, UMAP2, color = object_type_id))
obj_umap_plot = as.data.frame(out_obj_umap$layout)
colnames(obj_umap_plot) = c("UMAP1", "UMAP2")
obj_umap_plot_all_data = obj_umap_plot
obj_umap_plot_all_data = cbind(obj_umap_plot, obj_normalized)
p1_U = ggplot(obj_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = object_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1_U + theme_tsne
p1 + theme_tsne
# plot tSNE
p1 = ggplot(obj_tsne_plot_all_data, aes(x = tSNE1, y = tSNE2, color = object_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1 + theme_tsne # from DM / FH script
p1_U = ggplot(obj_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = object_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1_U + theme_tsne
save.image("/Volumes/BryJC_Stanford/For_Ez_Segmentor/R4R/Untitled.RData")
savehistory("/Volumes/BryJC_Stanford/For_Ez_Segmentor/R4R/Untitled.Rhistory")
library("R.matlab")
library("digest")
library("rlang")
library("flowCore")
library("ks")
library("flowVS") #
library("flowViz")
library("RColorBrewer")
library("gplots")
library("ggplot2")
library("openxlsx") #
library("samr") #
library("lattice")
library("flowStats") #
library("gdata")
library("Rtsne")
library("umap")
library("FlowSOM") #
library("plyr")
library("pryr")
library("doBy") #
library("scales")
library("mixOmics") #
library("reshape2")
library("plotly") #
library("Rmisc")
library("Hmisc") #
# set seed for downstream analysis
set.seed(123)
##### 1) LOAD DATA #####
# move to location of your data, load in fcs and .mat files (spatial information retained here)
data_folder = '/Volumes/BryJC_Stanford/For_Ez_Segmentor/ControlCase_Hippocampus/MedRes_uci4516HIPR\(use\ this\)/'
##### 1) LOAD DATA #####
# move to location of your data, load in fcs and .mat files (spatial information retained here)
data_folder = '/Volumes/BryJC_Stanford/For_Ez_Segmentor/ControlCase_Hippocampus/MedRes_uci4516HIPR(use\ this\)/'
##### 1) LOAD DATA #####
# move to location of your data, load in fcs and .mat files (spatial information retained here)
data_folder = '/Volumes/BryJC_Stanford/For_Ez_Segmentor/ControlCase_Hippocampus/MedRes_uci4516HIPR(use this)/'
setwd(data_folder)
ezRun = c('190828_uci4516HIPR_FinalSet3/ezSegResults_Control_MedRez_hippoC1', '190828_uci4516HIPR_FinalSet3/ezSegResults_Control_MedRez_hippoC2', '190828_uci4516HIPR_FinalSet3/ezSegResults_Control_MedRez_hippoC3')
# create FlowSet from fcs files
csvNames = c()
for (run in ezRun) {
csvNames = c(csvNames, list.files(path = paste0(run,'/','objects_points'), recursive = T, full.names = T, pattern = ".csv"))
}
View(csvNames)
csvNames[1:3,10:13]
csvNames[1,3,10,113]
csvNames[1:3:10:113]
csvNames = mixedsort(csvNames)
library("dplyr")
csvNames = mixedsort(csvNames)
install.packages('gtools')
library(gtools)
csvNames = mixedsort(csvNames)
##### 1) LOAD DATA #####
# move to location of your data, load in fcs and .mat files (spatial information retained here)
ez_folder = '/Volumes/BryJC_Stanford/For_Ez_Segmentor/ControlCase_Hippocampus/MedRes_uci4516HIPR(use this)/'
setwd(data_folder)
ezRun = c('190828_uci4516HIPR_FinalSet3/ezSegResults_Control_MedRez_hippoC1', '190828_uci4516HIPR_FinalSet3/ezSegResults_Control_MedRez_hippoC2', '190828_uci4516HIPR_FinalSet3/ezSegResults_Control_MedRez_hippoC3')
# create FlowSet from fcs files
csv_names = c()
for (run in ezRun) {
csv_names = c(csv_names, list.files(path = paste0(run,'/','objects_points'), recursive = T, full.names = T, pattern = ".csv"))
}
csv_names = mixedsort(csv_names)
obj_raw = lapply(csv_names, read.csv)
# create a list 'point_source' that assigns a point_id to each object
dim = lapply(obj_raw, dim)
dim = as.numeric(dim[,1])
dim[1]
dim[1,]
dim[1:,]
dim[1:nrow(dim),]
dim[1:length(dim),]
length(dim)
dim[1:length(dim)]
dim[1:length(dim)][1]
dim[1:length(dim)[1]]
dim[1:length(dim),]
dim[(1:length(dim))]
dim[(1:length(dim))[1]]
dim[1]
dim[[1]]
dim[[1]:[10]]
dim[[1][10]]
dim[1:10,]
dim[1:10, ]
dim[1][1:10, ]
dim[2]
dim[[2]
]
dim[[2]][1]
dim[[1:length(dim)]][1]
dim[[1:length(dim)]][1,]
dim[[1:length(dim)]]
dim[[1:2]]
dim[c(1:NROW(dim))]
dim[c(1:NROW(dim))][1]
dim[[c(1:NROW(dim))]]
dim[c(1:NROW(dim))]
dim[c(1:NROW(dim))[1]]
dim[c(1:NROW(dim))]
dim[c(1:NROW(dim))][,1]
dim[c(1:NROW(dim))]dim[,1]
k = dim[c(1:NROW(dim))]
k[1]
rm(k)
dim$1
dim$'1'
as.data.frame(dim)
k = as.data.frame(dim)
k[1]
k[1:10][1]
k[1:10][,1]
dim
dim[[2]][dim[[1]]]
dim[[2]]
dim[[2]][1]
dim_list = lapply(dim, dim[[x]][1])
unnest(dim)
obj_raw[1]
dim(obj_raw[1])
dim(obj_raw[2])
dim(obj_raw[[2]])
dim[[2]]
dim[[1]][1]
lapply(dim, dim[[1]][1])
k
k[,1]
k[1,]
k[[1,]
]
as.numeric(k[1,])
# create a list 'point_source' that assigns a point_id to each object
obj_dim = lapply(obj_raw, dim)
obj_dim = as.data.frame(obj_dim)
obj_dim = as.numeric(dim[1,])
obj_dim = as.numeric(objdim[1,])
obj_dim = as.numeric(obj_dim[1,])
save.image("/Volumes/BryJC_Stanford/For_Ez_Segmentor/R4R/Untitled.RData")
savehistory("/Volumes/BryJC_Stanford/For_Ez_Segmentor/R4R/Untitled.Rhistory")
