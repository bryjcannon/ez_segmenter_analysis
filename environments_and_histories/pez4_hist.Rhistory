region_id = as.vector(x = NULL)
for(i in 1:length(dim)) { #loop creates the actual vector with point id's for each object
temp_point_id = rep(point_numbers[i], dim[i])
point_id = c(point_id, temp_point_id)
temp_object_type_id = rep(object_types[i], dim[i])
object_type_id = c(object_type_id, temp_object_type_id)
temp_region_id = rep(regions[i], dim[i])
region_id = c(region_id, temp_region_id)
}
# convert init_data format to matrix, then dataFrame, then bind labeling info to dataFrame
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
# create FlowSet from fcs files
init_fcsNames = list.files(path = paste0(ezRun,'/','fcs_all'), full.names = T, pattern = ".fcs")
init_flowSet = read.flowSet(files = curr_fcsNames, alter.names = T, transformation = FALSE, emptyValue = FALSE, truncate_max_range = FALSE)
# create FlowSet from fcs files
init_fcsNames = list.files(path = paste0(ezRun,'/','fcs_all'), full.names = T, pattern = ".fcs")
init_flowSet = read.flowSet(files = init_fcsNames, alter.names = T, transformation = FALSE, emptyValue = FALSE, truncate_max_range = FALSE)
# create a list 'point_source' that assigns a point_id to each object
dim = fsApply(init_flowSet, dim)
dim = as.numeric(dim[,1])
# set up lists for adding point_ids for each object
point_names = sampleNames(init_flowSet)
point_numbers = as.numeric(gsub("[^0-9]*", '', gsub(".*Point[^0-9]*", '', point_names))) # grabs point numbers from filenames and converts to numeric
point_id = as.vector(x = NULL)
# set up lists for adding object_type_ids for each object
object_types = gsub("_dataScaleSize_Point[0-9]*.fcs", "", point_names)
object_type_id = as.vector(x = NULL)
# set up lists for adding region_ids for each object
regions = rep('CA2', length(dim))
region_id = as.vector(x = NULL)
for(i in 1:length(dim)) { #loop creates the actual vector with point id's for each object
temp_point_id = rep(point_numbers[i], dim[i])
point_id = c(point_id, temp_point_id)
temp_object_type_id = rep(object_types[i], dim[i])
object_type_id = c(object_type_id, temp_object_type_id)
temp_region_id = rep(regions[i], dim[i])
region_id = c(region_id, temp_region_id)
}
# convert init_data format to matrix, then dataFrame, then bind labeling info to dataFrame
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
# create FlowSet from fcs files
init_fcsNames = list.files(path = paste0(ezRun,'/','fcs_all'), full.names = T, pattern = ".fcs")
##### 1) LOAD DATA #####
# move to location of your data, load in fcs and .mat files (spatial information retained here)
data_folder = '/Volumes/BryJC_Stanford/For_Ez_Segmentor/HiADCase_Hippocampus\ /denoisedfft_HiResADuci2717J/'
setwd(data_folder)
ezRun = 'ezSegResults_CA2'
# create FlowSet from fcs files
init_fcsNames = list.files(path = paste0(ezRun,'/','fcs_all'), full.names = T, pattern = ".fcs")
init_flowSet = read.flowSet(files = init_fcsNames, alter.names = T, transformation = FALSE, emptyValue = FALSE, truncate_max_range = FALSE)
# create a list 'point_source' that assigns a point_id to each object
dim = fsApply(init_flowSet, dim)
dim = as.numeric(dim[,1])
# set up lists for adding point_ids for each object
point_names = sampleNames(init_flowSet)
point_numbers = as.numeric(gsub("[^0-9]*", '', gsub(".*Point[^0-9]*", '', point_names))) # grabs point numbers from filenames and converts to numeric
point_id = as.vector(x = NULL)
# set up lists for adding object_type_ids for each object
object_types = gsub("_dataScaleSize_Point[0-9]*.fcs", "", point_names)
object_type_id = as.vector(x = NULL)
# set up lists for adding region_ids for each object
regions = rep('CA2', length(dim))
region_id = as.vector(x = NULL)
for(i in 1:length(dim)) { #loop creates the actual vector with point id's for each object
temp_point_id = rep(point_numbers[i], dim[i])
point_id = c(point_id, temp_point_id)
temp_object_type_id = rep(object_types[i], dim[i])
object_type_id = c(object_type_id, temp_object_type_id)
temp_region_id = rep(regions[i], dim[i])
region_id = c(region_id, temp_region_id)
}
# convert init_data format to matrix, then dataFrame, then bind labeling info to dataFrame
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
kk = as.matrix(objects_data_frame)
class(kk[1])
class(kk[1,5])
class(kk[,5])
class(kk[,7])
class(kk[,9])
dimnames(objects_data_matrix)
dimnames(objects_data_frame)
# convert init_data format to matrix (numeric info), then dataFrame (characters + factors), then bind labeling info to dataFrame (keeps string labels)
objects_data_matrix = fsApply(init_flowSet, exprs)
class(objects_data_matrix[,7:47])
class(objects_data_matrix[7,47])
class(objects_data_frame[7,47])
class(objects_data_frame[,7:47])
class(kk[7,47])
kk = matrix(kk)
class(kk[7,47])
class(kk[,7:47])
rm(kk)
kk = objects_data_matrix
kk = cbind(kk, point_id, object_type_id, region_id)
class(kk[7,47])
kk = as.matrix(kk)
class(kk[7,47])
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
rm(kk)
kk = as.numeric(objects_data_frame[7,47])
kk
kk = as.numeric(objects_data_frame[,7:47])
kk
class(kk)
kk = as.matrix(objects_data_frame[,7:47])
kk
kk = as.matrix(objects_data_frame[,7:47])
kk
kk = cbind(objects_data_matrix, point_id, object_type_id, region_id)
class(kk)
kk = as.data.frame(kk)
class(kk)
class(kk[7,47])
kk = as.matrix(kk)
class(kk[7,47])
View(kk)
View(kk)
kk = data.matrix(objects_data_frame)
class(kk[7,47])
library(dplyr)
kk
kk %>% mutate_if(is.character, as.numeric)
kk %>% mutate_if(is.factor, as.numeric)
class(kk)
kk = data.matrix(objects_data_frame)
kk = transform(kk, as.numeric())
kk
class(kk)
class(kk[,7:47])
class(kk[7,47])
kk = transform(kk, as.numeric())
kk
class(kk[7,47])
class(objects_data_frame)
objects_data_frame = as.data.frame(objects_data_matrix)
class(objects_data_frame)
class(objects_data_frame[7,47])
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
class(objects_data_frame[7,47])
objects_data_frame = transform(objects_data_frame, as.numeric())
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
objects_data_frame = transform(objects_data_frame, as.numeric())
# convert init_data format to matrix (numeric info), then dataFrame (characters + factors), then bind labeling info to dataFrame (keeps string labels)
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
objM = as.matrix(objects_data_frame[,7:47])
class(objM)
class(objM[,5])
objects_data_frame = as.data.frame(objects_data_matrix)
class(objects_data_frame)
class(objects_data_frame[,7:47])
class(objects_data_frame[7,47])
objects_data_frame %>% print('q')
objects_data_frame %>% mutate(point_id, object_type_id, region_id)
class(objects_data_frame)
class(objects_data_frame[,7:47])
class(objects_data_frame[7,47])
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
# convert init_data format to matrix (numeric info), then dataFrame (characters + factors), then bind labeling info to dataFrame (keeps string labels)
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame %>% mutate(point_id, object_type_id, region_id)
objects_data_frame %<>% mutate(point_id, object_type_id, region_id)
objects_data_frame %<>% mutate(point_id, object_type_id, region_id) %>% pull()
objects_data_frame$region_id
objects_data_frame.region_id
View(kk)
View(kk)
# convert init_data format to matrix (numeric info), then dataFrame (characters + factors), then bind labeling info to dataFrame (keeps string labels)
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame %>% mutate(point_id, object_type_id, region_id) %>% pull()
objects_data_frame %<>% mutate(point_id, object_type_id, region_id) %>% pull()
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_matrix, point_id, object_type_id, region_id)
objects_data_frame = as.data.frame(objects_data_matrix)
region_id
class(region_id)
list(region_id)
region_id = list(region_id)
View(region_id)
objects_data_frame = cbind(region_id)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(object_data_frame, region_id)
objects_data_frame = cbind(objects_data_frame, region_id)
View(objects_data_frame)
View(objects_data_frame)
View(objects_data_frame[1])
objects_data_frame = cbind(objects_data_frame, region_id[1])
objects_data_frame = cbind(objects_data_matrix, as.factor(point_id), as.factor(object_type_id), as.factor(region_id))
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_frame, as.factor(point_id), as.factor(object_type_id), as.factor(region_id))
objects_data_frame = cbind(objects_data_frame, point_id, object_type_id, region_id)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_frame, point_id, object_type_id, region_id)
for(i in 1:length(dim)) { #loop creates the actual vector with point id's for each object
temp_point_id = rep(point_numbers[i], dim[i])
point_id = c(point_id, temp_point_id)
temp_object_type_id = rep(object_types[i], dim[i])
object_type_id = c(object_type_id, temp_object_type_id)
temp_region_id = rep(regions[i], dim[i])
region_id = c(region_id, temp_region_id)
}
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_frame, point_id, object_type_id, region_id)
dim = fsApply(init_flowSet, dim)
dim = as.numeric(dim[,1])
# set up lists for adding point_ids for each object
point_names = sampleNames(init_flowSet)
point_numbers = as.numeric(gsub("[^0-9]*", '', gsub(".*Point[^0-9]*", '', point_names))) # grabs point numbers from filenames and converts to numeric
point_id = as.vector(x = NULL)
# set up lists for adding object_type_ids for each object
object_types = gsub("_dataScaleSize_Point[0-9]*.fcs", "", point_names)
object_type_id = as.vector(x = NULL)
# set up lists for adding region_ids for each object
regions = rep('CA2', length(dim))
region_id = as.vector(x = NULL)
for(i in 1:length(dim)) { #loop creates the actual vector with point id's for each object
temp_point_id = rep(point_numbers[i], dim[i])
point_id = c(point_id, temp_point_id)
temp_object_type_id = rep(object_types[i], dim[i])
object_type_id = c(object_type_id, temp_object_type_id)
temp_region_id = rep(regions[i], dim[i])
region_id = c(region_id, temp_region_id)
}
# convert init_data format to matrix (numeric info), then dataFrame (characters + factors), then bind labeling info to dataFrame (keeps string labels)
objects_data_matrix = fsApply(init_flowSet, exprs)
objects_data_frame = as.data.frame(objects_data_matrix)
objects_data_frame = cbind(objects_data_frame, point_id, object_type_id, region_id)
# set seed for downstream analysis
set.seed(123)
panel = colnames(objects_data_frame)
panel = colnames(objects_data_frame[7,47])
panel = colnames(objects_data_frame[,7:47])
View(panel)
panel = colnames(objects_data_frame[,7:47][, -c(10,11,12)])
panel = colnames(objects_data_frame[,7:47])
panel = colnames(objects_data_frame[,7:47][, -c(10:12)])
panel = colnames(objects_data_frame[,7:47][, -c(10:12)])
panel = colnames(objects_data_frame[,7:47])
panel = colnames(objects_data_frame[,7:47])
panel = colnames(objects_data_frame[,7:47][, -c(10:12)])
panel = colnames(objects_data_frame[,7:47])
panel = colnames(objects_data_frame[,7:47][, -c(4,5)])
obj_linear_transform = objects_data_frame
obj_linear_transform[,7:47] = obj_linear_transform[,7:47]*100 # multiply all counts by 100 (linear transform)
obj_linear_transform = objects_data_frame
obj_linear_transform[,3:54] = obj_linear_transform[,3:54]*100 # multiply all counts by 100 (linear transform)
#PERCENTILE normalize expression values from 0 to 1
per.vector <- apply(obj_lin_asinh_transf[,3:54], 2, function(x) quantile(x, 0.9999, names = F))
# do arcsinh transformation only for the clustering.channels
obj_lin_asinh_transf = obj_linear_transform
asinh_scale = 5
obj_lin_asinh_transf[,3:54] = asinh(obj_lin_asinh_transf[,3:54] / asinh_scale)
#PERCENTILE normalize expression values from 0 to 1
per.vector <- apply(obj_lin_asinh_transf[,3:54], 2, function(x) quantile(x, 0.9999, names = F))
per.vector
#PERCENTILE normalize expression values from 0 to 1
obj_normalized = obj_lin_asinh_transf
normalization_vector = apply(obj_lin_asinh_transf[,3:54], 2, function(x) quantile(x, 0.9999, names = F))
t(obj_normalized[,3:54])
obj_normalized[,3:54]
obj_normalized[,3:54] = t(t(obj_normalized[,3:54]) / as.numeric(normalization_vector))
# check whether you adjusted the range approximately from 0 to 1
apply(obj_normalized[,3:54], 2, max)
# check whether you adjusted the range approximately from 0 to 1
apply(obj_normalized[,3:54], 2, min)
ggplot2(data = obj_normalized, aes(x = CD45, y = Iba1)) + geom_point(alpha=1, size=0.5)
ggplot(data = obj_normalized, aes(x = CD45, y = Iba1)) + geom_point(alpha=1, size=0.5)
library(ggplot2)
ggplot(data = obj_normalized, aes(x = CD45, y = Iba1)) + geom_point(alpha=1, size=0.5)
ggplot(data = obj_normalized, aes(x = microglia_clean, y = ApoE4)) + geom_point(alpha=1, size=0.5)
library(Rtsne)
panel
test_tsne_data = as.matrix(obj_normalized[,7:47])
head(test_tsne_data)
head(test_tsne_data)panel
head(test_tsne_data)c(panel)
test_tsne_data[c(panel)]
test_tsne_data[,c(panel)]
head(test_tsne_data[,c(panel)])
test_tsne = Rtsne(test_tsne_data[,c(panel)], dims = 2, perplexity = 50, theta = 0.5, max_iter = 1000, verbose = T, pca = F, check_duplicates = F)
test_plot = as.data.frame((test_tsne$Y))
colnames(test_plot)
colnames(test_plot) = c('tSNE1', 'tSNE2')
test_plot$obj_id = obj_normalized$objLabelInImage
test_plot$point_id = obj_normalized$point_id
head(test_plot)
p1 = ggplot(test_plot, aes(x=tSNE1, y=tSNE2)) + geom_point(size=1) + coord_fized(ratio = 1)
p1 = ggplot(test_plot, aes(x=tSNE1, y=tSNE2)) + geom_point(size=1) + coord_fixed(ratio = 1)
p1
savehistory("~/Desktop/Untitled.Rhistory")
library("R.matlab")
library("digest")
library("rlang")
library("flowCore")
library("ks")
library("flowVS") #
library("flowViz")
library("RColorBrewer")
library("gtools")
library("gplots")
library("ggplot2")
library("openxlsx") #
library("samr") #
library("lattice")
library("flowStats") #
library("gdata")
library("Rtsne")
library("umap")
library("FlowSOM") #
library("dplyr")
library('plyr')
library("pryr")
library("doBy") #
library("scales")
library("mixOmics") #
library("reshape2")
library("plotly") #
library("Rmisc")
library("Hmisc") #
#https://support.bioconductor.org/p/109128/ --> explains why use Biobase::exprs
exprs = Biobase::exprs
# set seed for downstream analysis
set.seed(123)
##### 1) LOAD DATA #####
# move to location of your data, load in csv and .mat files (spatial information stored in .mat)
ez_folder <- '/Volumes/BryJC_Stanford/For_Ez_Segmentor/HiADCase_Hippocampus /denoisedfft_HiResADuci2717J'
setwd(ez_folder)
ezRun <- c('ezSegResults_CA2+', 'ezSegResults_DG+')
object_types <- c('amyloidopathy', 'tauopathy', 'microglia_process', 'vessel_CD31_CD105', 'vessel_MCT1')
# create data.frame containing single object data from csv files - for each run and each object type
master_obj_data <- data.frame()
for (run in ezRun) {
obj_data_raw_all <- data.frame()
for (obj_type in object_types) {
csv_names <- list.files(path = paste0(run,'/','objects_points'), recursive = T, full.names = T, pattern = paste0(obj_type, "_dataScaleSize.csv")) # read in csv files for object type
csv_names <- mixedsort(csv_names)
obj_data_raw <- lapply(csv_names, read.csv) %>% bind_rows() # grab data from csv's then convert data to data.frame
obj_type_id <- rep(obj_type, dim(obj_data_raw)[1]) # create column of length object number with obj_type info
obj_data_raw <- cbind(obj_data_raw, obj_type_id) # add obj_type_id to data
obj_data_raw_all <- rbind(obj_data_raw_all, obj_data_raw) # collate to run data.frame
}
run_type_id <- rep(run, dim(obj_data_raw_all)[1]) # create column of length object number with run_type info
obj_data_raw_all <- cbind(obj_data_raw_all, run_type_id) # add run_type_id to data
master_obj_data <- rbind(master_obj_data, obj_data_raw_all) # collate to master data.frame
rm(obj_data_raw)
rm(obj_data_raw_all)
}
# assign and standardize panels if needed
panel <- names(master_obj_data[ ,8:48][, -c(4,5)]) # remove metals, composites, other labels
# linear transformation
obj_linear_transform <- master_obj_data
obj_linear_transform[,4:55] <- obj_linear_transform[,4:55]*100 # multiply all counts by 100 (linear transform)
# do arcsinh transformation only for the clustering.channels
obj_lin_asinh_transf <- obj_linear_transform
asinh_scale <- 5
obj_lin_asinh_transf[,4:55] <- asinh(obj_lin_asinh_transf[,4:55] / asinh_scale)
# PERCENTILE normalize expression values from 0 to 1
obj_normalized <- obj_lin_asinh_transf
normalization_vector <- apply(obj_lin_asinh_transf[,4:55], 2, function(x) quantile(x, 0.9999, names = F))
obj_normalized[,4:55] <- t(t(obj_normalized[,4:55]) / as.numeric(normalization_vector))
# check whether you adjusted the range approximately from 0 to 1
apply(obj_normalized[,4:55], 2, max)
filter(obj_normalized, obj_type_id == 'amyloidopathy')
# sample (sample_n) for later use by object type (filter)
n_sub <- 2000
subsetted_norm_data <- data.frame()
# sample (sample_n) for later use by object type
n_sub <- 2000
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub)
subsetted_norm_data <- c(subsetted_norm_data, sampled_obj)
}
# sample (sample_n) for later use by object type
n_sub <- 1000
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub)
subsetted_norm_data <- c(subsetted_norm_data, sampled_obj)
}
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub)
subsetted_norm_data <- rbind(subsetted_norm_data, sampled_obj)
}
# UMAP analysis - SUBSETTED DATA
obj_sub_umap <- subsetted_norm_data[, c(panel)]
obj_sub_umap <- as.matrix(obj_sub_umap)
out_obj_sub_umap <- umap(obj_sub_umap)
library("umap")
install.packages(umap)
install.packages('umap')
library("umap")
out_obj_sub_umap <- umap(obj_sub_umap)
obj_sub_umap_plot <- as.data.frame(out_obj_sub_umap$layout)
colnames(obj_sub_umap_plot) <- c("UMAP1", "UMAP2")
obj_sub_umap_plot_all_data <- obj_sub_umap_plot
obj_sub_umap_plot_all_data <- cbind(obj_sub_umap_plot, subsetted_norm_data)
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = obj_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1_sub_U
t
t
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = CD47)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1_sub_U
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = CD47)) +
geom_point(size = 1) +
coord_fixed(ratio = 1) +
scale_colour_gradient(low = "black", high = "red")
p1_sub_U
# UMAP analysis
obj_umap <- obj_normalized[, c(panel)]
obj_umap <- as.matrix(obj_umap)
out_obj_umap <- umap(obj_umap)
obj_umap_plot <- as.data.frame(out_obj_umap$layout)
colnames(obj_umap_plot) <- c("UMAP1", "UMAP2")
obj_umap_plot_all_data <- obj_umap_plot
obj_umap_plot_all_data <- cbind(obj_umap_plot, obj_normalized)
# sample (sample_n) for later use by object type
n_sub_fraction <- 0.25
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub)
subsetted_norm_data <- rbind(subsetted_norm_data, sampled_obj)
}
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub_fraction)
subsetted_norm_data <- rbind(subsetted_norm_data, sampled_obj)
}
# sample (sample_n) for later use by object type
n_sub_fraction <- 0.25
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub_fraction)
subsetted_norm_data <- rbind(subsetted_norm_data, sampled_obj)
}
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_frac(typed_obj, n_sub_fraction)
subsetted_norm_data <- rbind(subsetted_norm_data, sampled_obj)
}
# UMAP analysis - SUBSETTED DATA
obj_sub_umap <- subsetted_norm_data[, c(panel)]
obj_sub_umap <- as.matrix(obj_sub_umap)
out_obj_sub_umap <- umap(obj_sub_umap)
obj_sub_umap_plot <- as.data.frame(out_obj_sub_umap$layout)
colnames(obj_sub_umap_plot) <- c("UMAP1", "UMAP2")
obj_sub_umap_plot_all_data <- obj_sub_umap_plot
obj_sub_umap_plot_all_data <- cbind(obj_sub_umap_plot, subsetted_norm_data)
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = obj_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1) +
scale_colour_gradient(low = "black", high = "red")
p1_sub_U
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = obj_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1) +
p1_sub_U
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = obj_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1_sub_U
# sample (sample_n) for later use by object type
n_sub_fraction <- 10
# sample (sample_n) for later use by object type
n_sub_fraction <- 1500
subsetted_norm_data <- data.frame()
for (obj_type in object_types) {
typed_obj <- filter(obj_normalized, obj_type_id == obj_type)
sampled_obj <- sample_n(typed_obj, n_sub_fraction)
subsetted_norm_data <- rbind(subsetted_norm_data, sampled_obj)
}
# UMAP analysis - SUBSETTED DATA
obj_sub_umap <- subsetted_norm_data[, c(panel)]
obj_sub_umap <- as.matrix(obj_sub_umap)
out_obj_sub_umap <- umap(obj_sub_umap)
obj_sub_umap_plot <- as.data.frame(out_obj_sub_umap$layout)
colnames(obj_sub_umap_plot) <- c("UMAP1", "UMAP2")
obj_sub_umap_plot_all_data <- obj_sub_umap_plot
obj_sub_umap_plot_all_data <- cbind(obj_sub_umap_plot, subsetted_norm_data)
p1_sub_U <- ggplot(obj_sub_umap_plot_all_data, aes(x = UMAP1, y = UMAP2, color = obj_type_id)) +
geom_point(size = 1) +
coord_fixed(ratio = 1)
p1_sub_U
save.image("/Volumes/BryJC_Stanford/For_Ez_Segmentor/R4R/pez4_env.RData")
savehistory("/Volumes/BryJC_Stanford/For_Ez_Segmentor/R4R/pez4_hist.Rhistory")
